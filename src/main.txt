/*
 Basic MQTT example

 This sketch demonstrates the basic capabilities of the library.
 It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic"
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary

 It will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.

*/

#include <SPI.h>
#include <PubSubClient.h>
#include <WiFi.h>
#include <Arduino.h>

char ssid[] = "TEST";     //  your network SSID (name)
char pass[] = "12344321"; // your network password
int status = WL_IDLE_STATUS;
// Initialize the client library
WiFiClient wifiClient;
IPAddress server(127, 0, 0, 1);

const char *broker = "192.168.0.103";
PubSubClient client(wifiClient);

void callback(char *topic, byte *payload, unsigned int length)
{
  log_d("Message arrived [");
  log_d("%s", topic);
  log_d("] ");
  for (int i = 0; i < length; i++)
  {
    log_d("%s ", (char)payload[i]);
  }
  log_d();
}

void reconnect()
{
  // Loop until we're reconnected
  while (!client.connected())
  {
    log_d("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("jamDevice", "YA0o66prdG7QIOobfH8x", ""))
    {
      log_d("connected");
      // Once connected, publish an announcement...
      // client.publish("v1/devices/me/telemetry", "\"{temprature:33,humidity:43}\"");
      // ... and resubscribe
      // client.subscribe("inTopic");
    }
    else
    {
      log_d("failed, rc=");
      log_d("%i", client.state());
      log_d(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void connectToWiFi()
{
  WiFi.begin("TEST", "12344321");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    log_d(".");
  }
  log_d("CONNECTED");
}

void setup()
{
  Serial.begin(115200);
  delay(1000);
  if (WiFi.status() != WL_CONNECTED)
  {
    connectToWiFi();
  }
  client.setServer(broker, 1883);
  // client.setCallback(callback);
}

void loop()
{
  if (!client.connected())
  {
    reconnect();
  }
  client.loop();
}